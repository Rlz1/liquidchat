// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
const themeToggle = document.getElementById("themeToggle");
const sidebarLogo = document.getElementById("sidebarLogo");
const headerLogo = document.getElementById("headerLogo");
const mobileLogo = document.getElementById("mobileLogo");

function updateLogos() {
    const isDark = document.body.classList.contains("dark");
    const logoPath = isDark ? "/static/img/logo_w.png" : "/static/img/logo_d.png";
    
    sidebarLogo.src = logoPath;
    headerLogo.src = logoPath;
    mobileLogo.src = logoPath;
}

themeToggle.addEventListener("click", () => {
    if(document.body.classList.contains("light")) {
        document.body.classList.remove("light");
        document.body.classList.add("dark");
        themeToggle.textContent = "‚òÄÔ∏è";
    } else {
        document.body.classList.remove("dark");
        document.body.classList.add("light");
        themeToggle.textContent = "üåô";
    }
    updateLogos();
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let currentModel = "deepseek";
let touchStartX = 0;
let touchCurrentX = 0;
let isSwiping = false;
const SWIPE_THRESHOLD = 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–≤–∞–π–ø–∞
const modelAvatars = {
    deepseek: "/static/img/deepseek.png",
    mistral: "/static/img/mistral.png",
    hunyuan: "/static/img/hunyuan.png",
    dolphin: "/static/img/dolphin.png",
    kimi: "/static/img/kimi.png",
    qwen_coder: "/static/img/qwen_coder.png",
    glm: "/static/img/glm.png"
};
const modelNames = {
    deepseek: "DeepSeek",
    mistral: "Mistral Small",
    hunyuan: "Hunyuan",
    dolphin: "Dolphin",
    kimi: "Kimi",
    qwen_coder: "Qwen Coder",
    glm: "GLM 4.5"
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const messageInput = document.getElementById("messageInput");
const sendBtn = document.getElementById("sendBtn");
const chatOutput = document.getElementById("chatOutput");
const desktopAiList = document.getElementById("desktopAiList");
const mobileAiList = document.getElementById("mobileAiList");
const mobileSidebar = document.getElementById("mobileSidebar");
const overlay = document.getElementById("overlay");
const closeSidebar = document.getElementById("closeSidebar");
const swipeHint = document.getElementById("swipeHint");

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –ò–ò
function createAiListItems(container) {
    container.innerHTML = '';
    Object.entries(modelNames).forEach(([modelKey, modelName]) => {
        const aiItem = document.createElement('div');
        aiItem.className = `ai-item ${modelKey === currentModel ? 'active' : ''}`;
        aiItem.dataset.model = modelKey;
        
        aiItem.innerHTML = `
            <img src="${modelAvatars[modelKey]}" alt="${modelName}">
            <div class="ai-info">
                <div class="ai-name">${modelName}</div>
            </div>
        `;
        
        aiItem.addEventListener('click', () => {
            selectModel(modelKey);
            if (window.innerWidth <= 768) {
                closeMobileSidebar();
            }
        });
        
        container.appendChild(aiItem);
    });
}

// –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
function selectModel(modelKey) {
    currentModel = modelKey;
    createAiListItems(desktopAiList);
    createAiListItems(mobileAiList);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
    const notification = document.createElement('div');
    notification.className = 'message-container ai';
    notification.innerHTML = `
        <img class="avatar" src="${modelAvatars[modelKey]}" alt="${modelNames[modelKey]}">
        <div class="message-content">
            <div class="message ai-message">
                –¢–µ–ø–µ—Ä—å –æ–±—â–∞—é—Å—å –∫–∞–∫: <strong>${modelNames[modelKey]}</strong>
            </div>
        </div>
    `;
    chatOutput.appendChild(notification);
    chatOutput.scrollTop = chatOutput.scrollHeight;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function openMobileSidebar() {
    mobileSidebar.classList.add('open');
    overlay.style.display = 'block';
    document.body.style.overflow = 'hidden';
    if (swipeHint) swipeHint.style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function closeMobileSidebar() {
    mobileSidebar.classList.remove('open');
    overlay.style.display = 'none';
    document.body.style.overflow = '';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
overlay.addEventListener('click', closeMobileSidebar);
closeSidebar.addEventListener('click', closeMobileSidebar);

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function handleTouchStart(e) {
    if (window.innerWidth <= 768) {
        isSwiping = true;
        touchStartX = e.touches[0].clientX;
        touchCurrentX = touchStartX;
    }
}

function handleTouchMove(e) {
    if (!isSwiping) return;
    
    touchCurrentX = e.touches[0].clientX;
    const diff = touchCurrentX - touchStartX;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º—è —Å–≤–∞–π–ø–∞
    if (Math.abs(diff) > 10) {
        e.preventDefault();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–ø—Ä–∞–≤–æ
    if (diff > 0 && touchStartX < 50) {
        const translateX = Math.min(diff, mobileSidebar.offsetWidth);
        mobileSidebar.style.transform = `translateX(${translateX}px)`;
    }
}

function handleTouchEnd() {
    if (!isSwiping) return;
    
    const diff = touchCurrentX - touchStartX;
    
    // –ï—Å–ª–∏ —Å–≤–∞–π–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    if (diff > SWIPE_THRESHOLD && touchStartX < 50) {
        openMobileSidebar();
    } else {
        // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –º–µ—Å—Ç–æ
        mobileSidebar.style.transform = 'translateX(0)';
    }
    
    isSwiping = false;
    mobileSidebar.style.transform = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–≤–∞–π–ø–∞
document.addEventListener('touchstart', handleTouchStart, { passive: false });
document.addEventListener('touchmove', handleTouchMove, { passive: false });
document.addEventListener('touchend', handleTouchEnd);
document.addEventListener('touchcancel', handleTouchEnd);

// –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
document.addEventListener('click', (e) => {
    if (window.innerWidth <= 768 && e.clientX < 20 && !mobileSidebar.classList.contains('open')) {
        openMobileSidebar();
    }
});

// –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–≤–∞–π–ø–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let swipeHintShown = localStorage.getItem('swipeHintShown');

if (!swipeHintShown && window.innerWidth <= 768 && swipeHint) {
    setTimeout(() => {
        swipeHint.style.display = 'flex';
    }, 1000);
    
    setTimeout(() => {
        swipeHint.style.display = 'none';
        localStorage.setItem('swipeHintShown', 'true');
    }, 5000);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª–∏–∫—É –∏–ª–∏ Enter
sendBtn.addEventListener("click", sendMessage);
messageInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
        sendMessage();
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;

    addMessageToChat(message, "user");
    messageInput.value = "";

    const typingIndicator = showTypingIndicator();

    try {
        const response = await fetch("/ask", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify({message, model: currentModel})
        });

        const data = await response.json();
        removeTypingIndicator(typingIndicator);
        addMessageToChat(data.answer, "ai", true);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        removeTypingIndicator(typingIndicator);
        addMessageToChat("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", "ai");
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
function showTypingIndicator() {
    const typingContainer = document.createElement("div");
    typingContainer.classList.add("message-container", "ai");
    typingContainer.id = "typing-indicator";
    
    const avatar = document.createElement("img");
    avatar.classList.add("avatar");
    avatar.src = modelAvatars[currentModel];
    avatar.alt = modelNames[currentModel];
    
    const messageContent = document.createElement("div");
    messageContent.classList.add("message-content");
    
    const typingIndicator = document.createElement("div");
    typingIndicator.classList.add("typing-indicator");
    typingIndicator.innerHTML = `–ü–µ—á–∞—Ç–∞–µ—Ç<span class="typing-dots"><span class="typing-dot"></span><span class="typing-dot"></span><span class="typing-dot"></span></span>`;
    
    messageContent.appendChild(typingIndicator);
    typingContainer.appendChild(avatar);
    typingContainer.appendChild(messageContent);
    
    chatOutput.appendChild(typingContainer);
    chatOutput.scrollTop = chatOutput.scrollHeight;
    
    return typingContainer;
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
function removeTypingIndicator(typingIndicator) {
    if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.parentNode.removeChild(typingIndicator);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessageToChat(message, sender, withAnimation = false) {
    const messageContainer = document.createElement("div");
    messageContainer.classList.add("message-container", sender);
    
    if (sender === "ai") {
        const avatar = document.createElement("img");
        avatar.classList.add("avatar");
        avatar.src = modelAvatars[currentModel];
        avatar.alt = modelNames[currentModel];
        messageContainer.appendChild(avatar);
    }
    
    const messageContent = document.createElement("div");
    messageContent.classList.add("message-content");
    
    const messageEl = document.createElement("div");
    messageEl.classList.add("message", `${sender}-message`);
    
    if (sender === "ai" && withAnimation) {
        messageEl.innerHTML = `<span class="typing-animation">${message}</span>`;
        
        messageContent.appendChild(messageEl);
        messageContainer.appendChild(messageContent);
        chatOutput.appendChild(messageContainer);
        
        chatOutput.scrollTop = chatOutput.scrollHeight;
        
        setTimeout(() => {
            messageEl.innerHTML = message;
            chatOutput.scrollTop = chatOutput.scrollHeight;
        }, message.length * 40);
    } else {
        messageEl.textContent = message;
        messageContent.appendChild(messageEl);
        messageContainer.appendChild(messageContent);
        chatOutput.appendChild(messageContainer);
        chatOutput.scrollTop = chatOutput.scrollHeight;
    }
    
    if (sender === "user") {
        const avatar = document.createElement("img");
        avatar.classList.add("avatar");
        avatar.src = "/static/img/user.png";
        avatar.alt = "–í—ã";
        messageContainer.appendChild(avatar);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
createAiListItems(desktopAiList);
createAiListItems(mobileAiList);
updateLogos();